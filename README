PinCushion
==========

The original Pin Cushion implementation attempted to create Multiple Table Inheritance (MTI) that was agnostic to ActiveRecord. This meant that it used postgresql tricks to insert, update, and delete using triggers on views. This worked
in Rails 2.3, but unfortunately proved to be not as agnostic as hoped, and was incompatible with Rails 3. Instead of relying on hacks to trick Rails and Postgres into playing nice, Pin Cushion has now been refactored into being database
agnostic (theoretically) and taking advantage of both Ruby inheritance and Rails single table inheritance(STI).

Pin Cushion was inspired by CITIEsForRAILS http://altrabio.github.com/CITIEsForRAILS/, and the most recent version behaves similarly to that gem. For an explaination of the theory behind MTI, please see their site. The primary reason for
the redevelopment of Pin Cushion was at first a desire to avoid any special needs for the databases at all. This, unfortunately, proved fruitless due to Rails' built-in column addressing (where it was looking for fields on the base table
that were defined in the additional tables). When it became apparent that views would be needed, development of Pin Cushion continued because the solutions were less intrusive on Rails' STI functionality.

Pin Cushion was redesigned to support multi-level MTI, classes derived from MTI-enabled parents that do not define additional tables, and using multiple tables per MTI-enabled class.

Pin Cushion works in the same situations as Rails STI, but also comes with some of the same drawbacks. For example, it will not play well with polymporphic associations. The inheritance column is defined in the same way as STI. 

Example
=======

# Parent Table ActiveRecord Migration
CreateParentTable < ActiveRecord::Migration
  def self.up
    create_table :users do |t|
      t.string, :givenname
      t.string, :surname
      t.string, :user_type
      t.timestamps
    end
  end

  def self.down
    drop_table :users
  end
end

# Child Table ActiveRecord Migration
CreateChildTable < ActiveRecord::Migration
  def self.up
    create_table :email_users, :id => false  do |t|
      t.string, :email
      t.integer, :user_id
    end

    # Here is the simple to use declaration to create all the multiple table inheritance structures and functions in the database
    create_mti_view EmailUser
  end

  def self.down
    drop_mti_view EmailUser
    drop_table :email_users
  end
end


# The parent class
class User < ActiveRecord::Base
end

# The child class
# A view is created by Pin Cushion with the intended table name prefixed with view_
class EmailUser < User
  acts_as_MTI
end

After migrations are run, the two tables should look like one under the child model:

> user = EmailUser.create(:givenname => "Ethan", :surname => "Waldo", :email => "ewaldo@talho.org")
=> #<EmailUser id: 1, givenname: "Ethan", surname: "Waldo", email: "ewaldo@talho.org", user_type: "EmailUser", user_id: 1, created_at: "2011-03-16 22:51:19", updated_at: "2011-03-16 22:51:21">

> EmailUser.first
=> #<EmailUser id: 1, givenname: "Ethan", surname: "Waldo", email: "ewaldo@talho.org", user_type: "EmailUser", user_id: 1, created_at: "2011-03-16 22:51:19", updated_at: "2011-03-16 22:51:21">

> User.first
=> #<EmailUser id: 1, givenname: "Ethan", surname: "Waldo", email: "ewaldo@talho.org", user_type: "EmailUser", user_id: 1, created_at: "2011-03-16 22:51:19", updated_at: "2011-03-16 22:51:21">

> user.surname = "Weirdo"
=> "Weirdo"

> user.save
=> true

> EmailUser.first
=> #<EmailUser id: 1, givenname: "Ethan", surname: "Weirdo", email: "ewaldo@talho.org", user_type: "EmailUser", user_id: 1, created_at: "2011-03-16 22:51:19", updated_at: "2011-03-16 22:51:47">

> user.destroy
=> #<EmailUser id: 1, givenname: "Ethan", surname: "Weirdo", email: "ewaldo@talho.org", user_type: "EmailUser", user_id: 1, created_at: "2011-03-16 22:51:19", updated_at: "2011-03-16 22:51:47">

> EmailUser.first
=> nil

> User.first
=> nil

Migrations
==========

ActiveRecord::Migration has had these helper methods added:

create_mti_view(klass) - creates a view for the MTI

Copyright (c) 2012 TALHO, released under the MIT license
